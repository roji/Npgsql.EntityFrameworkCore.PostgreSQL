name: Build

on: [push, pull_request]

env:
  dotnet_sdk_version: '5.0.x'
  postgis_version: 3
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, windows-2019 ]
        pg_major: [ 12, 11, 10 ]
# PostgreSQL 13 is out, but there's no PostGIS binary for Windows yet (http://download.osgeo.org/postgis/windows/)
        include:
          - os: ubuntu-20.04
            pg_major: 13
            # pg_prerelease: prerelease

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Build
        run: dotnet build --configuration Debug
        shell: bash

      - name: Start PostgreSQL ${{ matrix.pg_major }} (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          # First uninstall any PostgreSQL installed on the image
          dpkg-query -W --showformat='${Package}\n' 'postgresql-*' | xargs sudo dpkg -P postgresql

          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update -qq
          sudo apt-get install -qq postgresql-${{ matrix.pg_major  }} postgresql-${{ matrix.pg_major }}-postgis-${{ env.postgis_version }}
          sudo sed -i 's/max_connections = 100/max_connections = 200/g' /etc/postgresql/${{ matrix.pg_major }}/main/postgresql.conf
          sudo systemctl restart postgresql
          sudo -u postgres psql -c "CREATE USER npgsql_tests SUPERUSER PASSWORD 'npgsql_tests'"

      - name: Start PostgreSQL ${{ matrix.pg_major }} (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          # Find EnterpriseDB version number
          EDB_VERSION=$(pwsh -c "
              \$global:progressPreference='silentlyContinue';
              Invoke-WebRequest -URI https://www.postgresql.org/applications-v2.xml |
                  Select-Object -ExpandProperty Content |
                  Select-Xml -XPath '/applications/application[id=\"postgresql_${{ matrix.pg_major }}\" and platform=\"windows-x64\"]/version/text()' |
                  Select-Object -First 1 -ExpandProperty Node |
                  Select-Object -ExpandProperty Value")

          # Install PostgreSQL
          echo "Installing PostgreSQL (version: ${EDB_VERSION})"
          curl -o pgsql.zip -L https://get.enterprisedb.com/postgresql/postgresql-${EDB_VERSION}-windows-x64-binaries.zip
          unzip pgsql.zip -x 'pgsql/include/**' 'pgsql/doc/**' 'pgsql/pgAdmin 4/**' 'pgsql/StackBuilder/**'

          # Match Npgsql CI Docker image and stash one level up
          cp {$GITHUB_WORKSPACE/.build,pgsql}/server.crt
          cp {$GITHUB_WORKSPACE/.build,pgsql}/server.key

          # Find OSGEO version number
          OSGEO_VERSION=$(\
            curl -Ls https://download.osgeo.org/postgis/windows/pg${{ matrix.pg_major }} |
            sed -n 's/.*>postgis-bundle-pg${{ matrix.pg_major }}-\(${{ env.postgis_version }}.[0-9]*.[0-9]*\)x64.zip<.*/\1/p')

          # Install PostGIS
          echo "Installing PostGIS (version: ${OSGEO_VERSION})"
          POSTGIS_FILE="postgis-bundle-pg${{ matrix.pg_major }}-${OSGEO_VERSION}x64"
          curl -o postgis.zip -L https://download.osgeo.org/postgis/windows/pg${{ matrix.pg_major }}/${POSTGIS_FILE}.zip
          unzip postgis.zip -d postgis
          cp -a postgis/$POSTGIS_FILE/. pgsql/

          # Start PostgreSQL
          pgsql/bin/initdb -D pgsql/PGDATA -E UTF8 -U postgres
          pgsql/bin/pg_ctl -D pgsql/PGDATA -l logfile -o '-c max_connections=200 -c max_prepared_transactions=10 -c ssl=true -c ssl_cert_file=../server.crt -c ssl_key_file=../server.key' start

          # Configure test account
          pgsql/bin/psql -U postgres -c "CREATE ROLE npgsql_tests SUPERUSER LOGIN PASSWORD 'npgsql_tests'"
          pgsql/bin/psql -U postgres -c "CREATE DATABASE npgsql_tests OWNER npgsql_tests"
        shell: bash

      - name: Test
        run: dotnet test --configuration Debug --logger "GitHubActions;report-warnings=false"
        shell: bash

  publish:
    needs: build

    runs-on: ubuntu-latest

    if: github.event_name == 'push' && startsWith(github.repository, 'npgsql/')

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Pack NuGet packages (CI versions)
        if: startsWith(github.ref, 'refs/heads/')
        run: dotnet pack --configuration Release --output nupkgs --version-suffix "ci.$(date -u +%Y%m%dT%H%M%S)+sha.${GITHUB_SHA:0:9}" -p:ContinuousIntegrationBuild=true

      - name: Pack NuGet packages (Release versions)
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet pack --configuration Release --output nupkgs -p:ContinuousIntegrationBuild=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: EFCore.PG
          path: nupkgs

      - name: Publish packages to MyGet (vnext)
        if: startsWith(github.ref, 'refs/heads/') && startsWith(github.ref, 'refs/heads/hotfix/') == false
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql-unstable/api/v3/index.json
        working-directory: nupkgs

      - name: Publish packages to MyGet (patch)
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql/api/v3/index.json
        working-directory: nupkgs
